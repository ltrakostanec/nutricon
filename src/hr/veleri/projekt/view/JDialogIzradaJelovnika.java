/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.veleri.projekt.view;

import hr.veleri.projekt.controller.DBspajanje;
import hr.veleri.projekt.model.Jelovnik;
import hr.veleri.projekt.model.Korisnik;
import hr.veleri.projekt.model.Mjerenje;
import hr.veleri.projekt.model.Namirnica;
import hr.veleri.projekt.model.NamirnicaNaObroku;
import hr.veleri.projekt.model.Obrok;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Leon
 */
public class JDialogIzradaJelovnika extends javax.swing.JDialog {

    /**
     * Creates new form JDialogIzradaJelovnika
     */
    public JDialogIzradaJelovnika(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        izradaJelovnika();
        
       // prikaziNamirnice();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSpremi = new javax.swing.JButton();
        dtpDatumJelovnika = new org.jdesktop.swingx.JXDatePicker();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOdabirNamirnice = new javax.swing.JTable();
        btnDodajNamirnicu = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtUkupnaEnergija = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTabbedPaneObrok = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstDorucak = new javax.swing.JList<>();
        lstDorucak.setModel(dlmDorucak);

        jPanel4 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstRucak = new javax.swing.JList<>();
        lstRucak.setModel(dlmRucak);
        jPanel5 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        lstVecera = new javax.swing.JList<>();
        lstVecera.setModel(dlmVecera);
        txtGramiNamirnice = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnPromijeniNamirnicu = new javax.swing.JButton();
        btnObrisiNamirnicu = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Izrada jelovnika");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Datum:");

        btnSpremi.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnSpremi.setText("Spremi jelovnik");
        btnSpremi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpremiActionPerformed(evt);
            }
        });

        dtpDatumJelovnika.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel9.setText("Odabir namirnica");
        jPanel1.add(jLabel9, java.awt.BorderLayout.PAGE_START);

        tableOdabirNamirnice.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        tableOdabirNamirnice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Naziv namirnice", "Energija (kcal)", "Šećeri (g)", "Masti (g)", "Bjelančevine (g)", "Odbitak"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableOdabirNamirnice);
        if (tableOdabirNamirnice.getColumnModel().getColumnCount() > 0) {
            tableOdabirNamirnice.getColumnModel().getColumn(0).setMaxWidth(90);
        }
        modelOdabirNamirnica = (DefaultTableModel)tableOdabirNamirnice.getModel();

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        btnDodajNamirnicu.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnDodajNamirnicu.setText("Dodaj namirnicu");
        btnDodajNamirnicu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajNamirnicuActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel2.setText("Ukupna energija:");

        txtUkupnaEnergija.setEditable(false);
        txtUkupnaEnergija.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel10.setText("kcal");

        jTabbedPaneObrok.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jPanel2.setLayout(new java.awt.BorderLayout());

        lstDorucak.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jScrollPane5.setViewportView(lstDorucak);

        jPanel2.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jTabbedPaneObrok.addTab("Doručak", jPanel2);

        jPanel4.setLayout(new java.awt.BorderLayout());

        lstRucak.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jScrollPane6.setViewportView(lstRucak);

        jPanel4.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        jTabbedPaneObrok.addTab("Ručak", jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        lstVecera.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jScrollPane7.setViewportView(lstVecera);

        jPanel5.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        jTabbedPaneObrok.addTab("Večera", jPanel5);

        txtGramiNamirnice.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel11.setText("g");

        btnPromijeniNamirnicu.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnPromijeniNamirnicu.setText("Promijeni namirnicu");
        btnPromijeniNamirnicu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromijeniNamirnicuActionPerformed(evt);
            }
        });

        btnObrisiNamirnicu.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnObrisiNamirnicu.setText("Obriši namirnicu");
        btnObrisiNamirnicu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiNamirnicuActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jLabel4.setMaximumSize(new java.awt.Dimension(123, 82));
        jLabel4.setMinimumSize(new java.awt.Dimension(123, 82));
        jLabel4.setPreferredSize(new java.awt.Dimension(123, 82));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSpremi)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dtpDatumJelovnika, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(txtGramiNamirnice, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(btnDodajNamirnicu)
                        .addGap(334, 334, 334))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTabbedPaneObrok))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtUkupnaEnergija, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnObrisiNamirnicu)
                        .addGap(45, 45, 45)
                        .addComponent(btnPromijeniNamirnicu)
                        .addGap(97, 97, 97))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(dtpDatumJelovnika, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGramiNamirnice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(btnDodajNamirnicu))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPaneObrok, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUkupnaEnergija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(btnPromijeniNamirnicu)
                    .addComponent(btnObrisiNamirnicu))
                .addGap(18, 18, 18)
                .addComponent(btnSpremi)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajNamirnicuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajNamirnicuActionPerformed
        // TODO add your handling code here:
        
//System.out.println(korisnik.getIme());
        if(txtGramiNamirnice.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Upišite količinu namirnice.\nKoličina namirnice mora bti upisana!"
               ,"Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
        }else{
            double kolicinaNamirnice = Double.parseDouble(txtGramiNamirnice.getText());
            int indexOdabraneNamirnice = tableOdabirNamirnice.getSelectedRow();
            if(indexOdabraneNamirnice>-1){
                Namirnica namirnica = new Namirnica();

                int idNamirnice = (Integer)modelOdabirNamirnica.getValueAt(indexOdabraneNamirnice, 0);
                namirnica.setId(idNamirnice);
                String naziv = (String)modelOdabirNamirnica.getValueAt(indexOdabraneNamirnice, 1);
                namirnica.setNaziv(naziv);
                Double energija = (Double)modelOdabirNamirnica.getValueAt(indexOdabraneNamirnice, 2);
                namirnica.setEnergija(energija);
                Double seceri = (Double)modelOdabirNamirnica.getValueAt(indexOdabraneNamirnice, 3);
                namirnica.setSeceri(seceri);
                Double masti = (Double)modelOdabirNamirnica.getValueAt(indexOdabraneNamirnice, 4);
                namirnica.setMasti(masti);
                Double bjelancevine = (Double)modelOdabirNamirnica.getValueAt(indexOdabraneNamirnice, 5);
                namirnica.setBjelancevine(bjelancevine);
                Double odbitak = (Double)modelOdabirNamirnica.getValueAt(indexOdabraneNamirnice, 6);
                namirnica.setOdbitak(odbitak);           

                NamirnicaNaObroku naObroku = kreirajNaObroku(namirnica, kolicinaNamirnice);
                dodajNamirnicuJelovnik(naObroku);
       
                
                if(jTabbedPaneObrok.getSelectedIndex()==0){
                    obrok.dodajListuDorucak(naObroku);
                    obrok.izracunEnergijeDorucak();
                    dlmDorucak.addElement(naObroku);
                }else if(jTabbedPaneObrok.getSelectedIndex()==1){
                    obrok.dodajListuRucak(naObroku);
                    obrok.izracunEnergijeRucak();                   
                    dlmRucak.addElement(naObroku);
                }else if(jTabbedPaneObrok.getSelectedIndex()==2){
                    obrok.dodajListuVecera(naObroku);
                    obrok.izracunEnergijeVecera();
                    dlmVecera.addElement(naObroku);
                }

                txtUkupnaEnergija.setText(Double.toString(jelovnik.getUkupnaEnergija()));
               
                if(mjerenje.getEer()<jelovnik.getUkupnaEnergija()){
                    JOptionPane.showMessageDialog(null, "Preporučena dnevna potreba za energijom za korisnika "
                        +korisnik.getIme()+" "+korisnik.getPrezime()+" je: "+mjerenje.getEer()+".\n"
                        +"Trenutna dnevna energija je: "+jelovnik.getUkupnaEnergija()
                        +"\nPreporučena dnevna potreba za energijom je prekoračena!"
                        ,"Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
                }

            }else{
                JOptionPane.showMessageDialog(null, "Odaberite namirnicu.\nNamirnica mora biti odabrana!"
                   ,"Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDodajNamirnicuActionPerformed

    private void btnPromijeniNamirnicuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromijeniNamirnicuActionPerformed
        // TODO add your handling code here:
        String txtKolicina = JOptionPane.showInputDialog(this,"Unesite novu količinu označene namirince:");
        if(jTabbedPaneObrok.getSelectedIndex()==0){
            int indexOdabraneNamirniceDorucak = lstDorucak.getSelectedIndex();
            if(indexOdabraneNamirniceDorucak>-1){
                
                NamirnicaNaObroku naObroku = (NamirnicaNaObroku) dlmDorucak.elementAt(indexOdabraneNamirniceDorucak);
                
                //DBspajanje.prikaziNamirnicuZaIzracunIzmjene(naObroku);
                //System.out.println(naObroku.getNamirnica().getEnergija());
                Double kolicina = Double.parseDouble(txtKolicina);
                naObroku.setKolicina(kolicina);
                izmijeniNamirnicuNaOborku(naObroku);
                
                //System.out.println(naObroku);
                naObroku.izracunObroka();
                jelovnik.izracunEnergijeJelovnika();
                dlmDorucak.removeElement(naObroku);
                dlmDorucak.addElement(naObroku);
                txtUkupnaEnergija.setText(Double.toString(jelovnik.getUkupnaEnergija()));
            }else{
                JOptionPane.showMessageDialog(null, "Odaberite namirnicu iz obroka koju želite obrisati.\n"
                        + "Namirnica mora biti odabrana!","Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
            }
                    
        }else if(jTabbedPaneObrok.getSelectedIndex()==1){
            int indexOdabraneNamirniceRucak = lstRucak.getSelectedIndex();
            if(indexOdabraneNamirniceRucak>-1){
                
                NamirnicaNaObroku naObroku = (NamirnicaNaObroku) dlmRucak.elementAt(indexOdabraneNamirniceRucak);
                
                //DBspajanje.prikaziNamirnicuZaIzracunIzmjene(naObroku);
                System.out.println(naObroku.getNamirnica().getEnergija());
                Double kolicina = Double.parseDouble(txtKolicina);
                naObroku.setKolicina(kolicina);
                izmijeniNamirnicuNaOborku(naObroku);
                
                //System.out.println(naObroku);
                naObroku.izracunObroka();
                jelovnik.izracunEnergijeJelovnika();
                dlmRucak.removeElement(naObroku);
                dlmRucak.addElement(naObroku);
                txtUkupnaEnergija.setText(Double.toString(jelovnik.getUkupnaEnergija()));
            }else{
                JOptionPane.showMessageDialog(null, "Odaberite namirnicu iz obroka koju želite obrisati.\n"
                        + "Namirnica mora biti odabrana!","Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
            }
            
        }else if(jTabbedPaneObrok.getSelectedIndex()==2){
            int indexOdabraneNamirniceVecera = lstVecera.getSelectedIndex();
            if(indexOdabraneNamirniceVecera>-1){
                
                NamirnicaNaObroku naObroku = (NamirnicaNaObroku) dlmVecera.elementAt(indexOdabraneNamirniceVecera);
                
                //DBspajanje.prikaziNamirnicuZaIzracunIzmjene(naObroku);
                //System.out.println(naObroku.getNamirnica().getEnergija());
                Double kolicina = Double.parseDouble(txtKolicina);
                naObroku.setKolicina(kolicina);
                izmijeniNamirnicuNaOborku(naObroku);
                
                //System.out.println(naObroku);
                naObroku.izracunObroka();
                jelovnik.izracunEnergijeJelovnika();
                dlmVecera.removeElement(naObroku);
                dlmVecera.addElement(naObroku);
                txtUkupnaEnergija.setText(Double.toString(jelovnik.getUkupnaEnergija()));
            }else{
                JOptionPane.showMessageDialog(null, "Odaberite namirnicu iz obroka koju želite obrisati.\n"
                        + "Namirnica mora biti odabrana!","Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
            }
        
        }
         
    }//GEN-LAST:event_btnPromijeniNamirnicuActionPerformed

    private void btnObrisiNamirnicuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiNamirnicuActionPerformed
        // TODO add your handling code here:
        //System.out.println(jelovnik.getUkupnaEnergija());

        if(jTabbedPaneObrok.getSelectedIndex()==0){
            int indexOdabraneNamirniceDorucak = lstDorucak.getSelectedIndex();
            if(indexOdabraneNamirniceDorucak>-1){
                
                NamirnicaNaObroku naObroku = (NamirnicaNaObroku) dlmDorucak.elementAt(indexOdabraneNamirniceDorucak);
                jelovnik.brisiNamirnicuJelovnika(naObroku);
                //System.out.println(naObroku);
                naObroku.izracunObroka();
                jelovnik.izracunEnergijeJelovnika();
                dlmDorucak.removeElement(naObroku);
                txtUkupnaEnergija.setText(Double.toString(jelovnik.getUkupnaEnergija()));
            }else{
                JOptionPane.showMessageDialog(null, "Odaberite namirnicu iz obroka koju želite obrisati.\n"
                        + "Namirnica mora biti odabrana!","Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
            }
                    
        }else if(jTabbedPaneObrok.getSelectedIndex()==1){
            int indexOdabraneNamirniceRucak = lstRucak.getSelectedIndex();
            if(indexOdabraneNamirniceRucak>-1){
                
                NamirnicaNaObroku naObroku = (NamirnicaNaObroku) dlmRucak.elementAt(indexOdabraneNamirniceRucak);
                jelovnik.brisiNamirnicuJelovnika(naObroku);
                //System.out.println(naObroku);
                naObroku.izracunObroka();
                jelovnik.izracunEnergijeJelovnika();
                dlmRucak.removeElement(naObroku);
                txtUkupnaEnergija.setText(Double.toString(jelovnik.getUkupnaEnergija()));
            }else{
                JOptionPane.showMessageDialog(null, "Odaberite namirnicu iz obroka koju želite obrisati.\n"
                        + "Namirnica mora biti odabrana!","Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
            }
            
        }else if(jTabbedPaneObrok.getSelectedIndex()==2){
            int indexOdabraneNamirniceVecera = lstVecera.getSelectedIndex();
            if(indexOdabraneNamirniceVecera>-1){
                
                NamirnicaNaObroku naObroku = (NamirnicaNaObroku) dlmVecera.elementAt(indexOdabraneNamirniceVecera);
                jelovnik.brisiNamirnicuJelovnika(naObroku);
                //System.out.println(naObroku);
                naObroku.izracunObroka();
                jelovnik.izracunEnergijeJelovnika();
                dlmVecera.removeElement(naObroku);
                txtUkupnaEnergija.setText(Double.toString(jelovnik.getUkupnaEnergija()));
            }else{
                JOptionPane.showMessageDialog(null, "Odaberite namirnicu iz obroka koju želite obrisati.\n"
                        + "Namirnica mora biti odabrana!","Izrada jelovnika", JOptionPane.ERROR_MESSAGE);
            }
       
        }
        

    }//GEN-LAST:event_btnObrisiNamirnicuActionPerformed

    private void btnSpremiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpremiActionPerformed
        // TODO add your handling code here:
        java.util.Date date;
        java.sql.Date sqldate;
        date = dtpDatumJelovnika.getDate();
        sqldate = new java.sql.Date(date.getTime());
        jelovnik.setDatumJelovnika(sqldate);
        
            try {
                if (DBspajanje.spremiJelovnik(jelovnik,korisnik,obrok)) {
                    JOptionPane.showMessageDialog(null,"Jelovnik je spremljen");
                } else {
                    JOptionPane.showMessageDialog(null,"Jelovnik nije spremljen");
                }
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null,"Greška kod spremanja jelovnika. Jelovnik nije spremljen. ");
            }
            izradaJelovnika();
        
    }//GEN-LAST:event_btnSpremiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogIzradaJelovnika.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogIzradaJelovnika.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogIzradaJelovnika.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogIzradaJelovnika.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogIzradaJelovnika dialog = new JDialogIzradaJelovnika(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajNamirnicu;
    private javax.swing.JButton btnObrisiNamirnicu;
    private javax.swing.JButton btnPromijeniNamirnicu;
    private javax.swing.JButton btnSpremi;
    private org.jdesktop.swingx.JXDatePicker dtpDatumJelovnika;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPaneObrok;
    private javax.swing.JList<NamirnicaNaObroku> lstDorucak;
    private javax.swing.JList<NamirnicaNaObroku> lstRucak;
    private javax.swing.JList<NamirnicaNaObroku> lstVecera;
    private javax.swing.JTable tableOdabirNamirnice;
    private javax.swing.JTextField txtGramiNamirnice;
    private javax.swing.JTextField txtUkupnaEnergija;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel modelOdabirNamirnica;
    DefaultListModel dlmDorucak = new DefaultListModel();
    DefaultListModel dlmRucak = new DefaultListModel();
    DefaultListModel dlmVecera = new DefaultListModel();
    Obrok obrok;
    
    Mjerenje mjerenje;
    Korisnik korisnik;
    Jelovnik jelovnik;
    
    private void izradaJelovnika() {
        prikaziNamirnice();
        jelovnik = new Jelovnik();
        obrok = new Obrok();
        dlmDorucak.clear();
        dlmRucak.clear();
        dlmVecera.clear();
    }
    
    private void prikaziNamirnice() {
        DefaultTableModel tableModel = (DefaultTableModel)tableOdabirNamirnice.getModel();
        tableModel.setRowCount(0);
        try {
        ArrayList<Namirnica> listaNamirnica = DBspajanje.ucitajNamirnice();
        for (Namirnica namirnica: listaNamirnica)
            tableModel.addRow(new Object[]{namirnica.getId(),namirnica.getNaziv(),namirnica.getEnergija(),
                namirnica.getSeceri(),namirnica.getMasti(),namirnica.getBjelancevine(),namirnica.getOdbitak()});

        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Nema konekcije na bazu. Kontaktirajte administratora."
               ,"Greška kod dohvata kategorija", JOptionPane.ERROR_MESSAGE);
        }
    }

    void postaviMjerenje(Mjerenje mjerenje) {
        this.mjerenje = mjerenje;
    }

    void postaviKorisnika(Korisnik korisnik) {
        this.korisnik = korisnik;
    }

    private NamirnicaNaObroku kreirajNaObroku(Namirnica namirnica, double kolicinaNamirnice) {
        NamirnicaNaObroku naObroku = new NamirnicaNaObroku();
        naObroku.setNamirnica(namirnica);
        naObroku.setKolicina(kolicinaNamirnice);
        naObroku.izracunObroka();
        return naObroku;
    }

    private void dodajNamirnicuJelovnik(NamirnicaNaObroku naObroku) {
        jelovnik.dodajNamirnicuNaObrok(naObroku);
        jelovnik.izracunEnergijeJelovnika(); 
    }

    void izmijeniNamirnicuNaOborku(NamirnicaNaObroku naObroku) {
        naObroku.izracunObroka();
        jelovnik.izracunEnergijeJelovnika();
        txtUkupnaEnergija.setText(Double.toString(jelovnik.getUkupnaEnergija()));
    }
    
    


}
