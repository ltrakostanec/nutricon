/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.veleri.projekt.view;

import hr.veleri.projekt.view.*;
import hr.veleri.projekt.controller.DBspajanje;
import hr.veleri.projekt.controller.controll;
import hr.veleri.projekt.model.Korisnik;
import hr.veleri.projekt.model.Korisnik;
import hr.veleri.projekt.model.Mjerenje;
import hr.veleri.projekt.model.Mjerenje;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Leon
 */
public class JDialogOdabirKorisnikaMjerenjaJelovnik extends javax.swing.JDialog {

    /**
     * Creates new form JDialogPrikazMjerenja
     */
    public JDialogOdabirKorisnikaMjerenjaJelovnik(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        prikazKorisnika();     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOdabirKorisnika = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePrikazMjerenja = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        btnIzradaJelovnika = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("Odabir korisnika");
        jPanel1.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        tableOdabirKorisnika.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        tableOdabirKorisnika.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ime", "Prezime", "OIB", "Rođendan", "Spol"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOdabirKorisnika.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOdabirKorisnikaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableOdabirKorisnika);
        if (tableOdabirKorisnika.getColumnModel().getColumnCount() > 0) {
            tableOdabirKorisnika.getColumnModel().getColumn(0).setMaxWidth(30);
            tableOdabirKorisnika.getColumnModel().getColumn(4).setMaxWidth(120);
            tableOdabirKorisnika.getColumnModel().getColumn(5).setMaxWidth(90);
        }
        modelOdabirKorisnika = (DefaultTableModel)tableOdabirKorisnika.getModel();

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Prikaz Mjerenja");

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Praćenje antropometrijskih mjerenja");
        jPanel2.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        tablePrikazMjerenja.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        tablePrikazMjerenja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tjelesna visina", "Tjelesna tezina", "Opseg struka", "Opseg bokova", "Dnevna aktivnost", "Datum mjerenja"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablePrikazMjerenja);
        if (tablePrikazMjerenja.getColumnModel().getColumnCount() > 0) {
            tablePrikazMjerenja.getColumnModel().getColumn(0).setMaxWidth(30);
        }
        modelPrikazMjerenja = (DefaultTableModel)tablePrikazMjerenja.getModel();

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jLabel4.setMaximumSize(new java.awt.Dimension(123, 82));
        jLabel4.setMinimumSize(new java.awt.Dimension(123, 82));
        jLabel4.setPreferredSize(new java.awt.Dimension(123, 82));

        btnIzradaJelovnika.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        btnIzradaJelovnika.setText("Izrada jelovnika");
        btnIzradaJelovnika.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzradaJelovnikaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 96, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(254, 254, 254)
                .addComponent(btnIzradaJelovnika)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnIzradaJelovnika)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableOdabirKorisnikaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOdabirKorisnikaMouseClicked
        // TODO add your handling code here:
        //brisanje svih trenutnih podataka iz tablice i kreiranje novog zaglavlja
        /*tablePrikazMjerenja.setModel(new DefaultTableModel(null,
                new String[]{"ID", "Tjelesna visina", "Tjelesna tezina", "Opseg struka",
                    "Opseg bokova", "Dnevna aktivnost", "Datum mjerenja"}));*/
        
        modelPrikazMjerenja.setRowCount(0);
        
        //punjenje podataka tablice s mjerenjima na temelju odabranog korisnika
        int indexOdabranogReda = tableOdabirKorisnika.getSelectedRow();
        int id = (Integer)modelOdabirKorisnika.getValueAt(indexOdabranogReda, 0);
        prikazMjerenjaKorisnika(id);
    }//GEN-LAST:event_tableOdabirKorisnikaMouseClicked

    private void btnIzradaJelovnikaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzradaJelovnikaActionPerformed
        // TODO add your handling code here:
        Korisnik korisnik = new Korisnik();
        Mjerenje mjerenje = new Mjerenje();
        int indexOdabranogKorisnika = tableOdabirKorisnika.getSelectedRow();
        int indexOdabranogMjerenja = tablePrikazMjerenja.getSelectedRow();

        if(indexOdabranogKorisnika>-1){
            int idKorisnika = (Integer)modelOdabirKorisnika.getValueAt(indexOdabranogKorisnika, 0);
            korisnik.setId(idKorisnika);
            String ime = (String)modelOdabirKorisnika.getValueAt(indexOdabranogKorisnika, 1);
            korisnik.setIme(ime);
            String prezime = (String)modelOdabirKorisnika.getValueAt(indexOdabranogKorisnika, 2);
            korisnik.setPrezime(prezime);
            String oib = (String)modelOdabirKorisnika.getValueAt(indexOdabranogKorisnika, 3);
            korisnik.setOib(oib);
            Date rodendan = (Date)modelOdabirKorisnika.getValueAt(indexOdabranogKorisnika, 4);
            korisnik.setRodjendan(rodendan);
            String spol = (String)modelOdabirKorisnika.getValueAt(indexOdabranogKorisnika, 5);
            korisnik.setSpol(spol);

            if(indexOdabranogMjerenja>-1){
                int idMjerenja = (Integer)modelPrikazMjerenja.getValueAt(indexOdabranogMjerenja, 0);
                mjerenje.setId(idMjerenja);
                double visina = (Double)modelPrikazMjerenja.getValueAt(indexOdabranogMjerenja, 1);
                mjerenje.setVisina(visina);
                double tezina = (Double)modelPrikazMjerenja.getValueAt(indexOdabranogMjerenja, 2);
                mjerenje.setTezina(tezina);
                double opsegStruka = (Double)modelPrikazMjerenja.getValueAt(indexOdabranogMjerenja, 3);
                mjerenje.setOpsegStruka(opsegStruka);
                double opsegBokova = (Double)modelPrikazMjerenja.getValueAt(indexOdabranogMjerenja, 4);
                mjerenje.setOpsegBokova(opsegBokova);
                String dnevnaAktivnost = (String)modelPrikazMjerenja.getValueAt(indexOdabranogMjerenja, 5);
                mjerenje.setDnevnaAktivnost(dnevnaAktivnost);
                Date datumMjerenja = (Date)modelPrikazMjerenja.getValueAt(indexOdabranogMjerenja, 6);
                mjerenje.setDatumMjerenja(datumMjerenja);
                
                controll.izracunajCjelodnevnuEnergetskuPotrebu(mjerenje, korisnik);

                JDialogIzradaJelovnika dlgIzracunMjerenja = new JDialogIzradaJelovnika(null,true);
                dlgIzracunMjerenja.postaviMjerenje(mjerenje);
                dlgIzracunMjerenja.postaviKorisnika(korisnik);
                dlgIzracunMjerenja.setVisible(true);
            }else{
                JOptionPane.showMessageDialog(null, "Odaberite mjerenje korisnika.\nMjerenje korisnika mora biti odabrano!"
                    ,"Izrada jelovnika za korisnika", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Odaberite korisnika.\nKorisnik mora biti odabran!"
                ,"Izrada jelovnika za korisnika", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnIzradaJelovnikaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogOdabirKorisnikaMjerenjaJelovnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogOdabirKorisnikaMjerenjaJelovnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogOdabirKorisnikaMjerenjaJelovnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogOdabirKorisnikaMjerenjaJelovnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogOdabirKorisnikaMjerenjaJelovnik dialog = new JDialogOdabirKorisnikaMjerenjaJelovnik(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzradaJelovnika;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableOdabirKorisnika;
    private javax.swing.JTable tablePrikazMjerenja;
    // End of variables declaration//GEN-END:variables
    private DefaultTableModel modelPrikazMjerenja;
    private DefaultTableModel modelOdabirKorisnika;

    private void prikazKorisnika() {

        //DefaultTableModel tableModel = (DefaultTableModel)tableOdabirKorisnika.getModel();
        tableOdabirKorisnika.getModel();
        modelOdabirKorisnika.setRowCount(0);
        try {
            ArrayList<Korisnik> listaKorisnika = DBspajanje.ucitajKorisnikeZaMjerenja();
            for (Korisnik korisnik: listaKorisnika){
            modelOdabirKorisnika.addRow(new Object[]{korisnik.getId(),korisnik.getIme(),korisnik.getPrezime(),korisnik.getOib(),
                korisnik.getRodjendan(),korisnik.getSpol()});
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Nema konekcije na bazu. Kontaktirajte administratora."
               ,"Greška kod dohvata korisnika", JOptionPane.ERROR_MESSAGE);
        }
    
    }

    private void prikazMjerenjaKorisnika(int id) {
        //DefaultTableModel tableModel = (DefaultTableModel)tablePrikazMjerenja.getModel();
        tablePrikazMjerenja.getModel();
        modelPrikazMjerenja.setRowCount(0);
        try {
            ArrayList<Mjerenje> listaMjerenja = DBspajanje.ucitajMjerenjaKorisnika(id);
            for (Mjerenje mjerenje: listaMjerenja){
                modelPrikazMjerenja.addRow(new Object[]{mjerenje.getId(),mjerenje.getVisina(),mjerenje.getTezina(),
                mjerenje.getOpsegStruka(),mjerenje.getOpsegBokova(),mjerenje.getDnevnaAktivnost(),mjerenje.getDatumMjerenja()});
            }
        } catch(Exception ex){
        JOptionPane.showMessageDialog(null, "Nema konekcije na bazu. Kontaktirajte administratora."
        ,"Greška kod dohvata mjerenja", JOptionPane.ERROR_MESSAGE);
        }    
    }
}
